# name of our workflow
name: Django CI/CD Workflow

# triggers for our workflow
on:
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      - '**'
  # any code pushed to master and develop branch will also be a trigger
  push:
    branches:
      - '**'

# three job definition
jobs:
  health-check-job: # health check job for testing and code formatting check
    runs-on: ubuntu-latest # os for running the job
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2
      - name: Setup python environment # setting python environment to 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.5' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
      - uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      - name: postgres DB #we need a postgres docker image to be booted a side car service to run the tests that needs a db
        run: docker-compose up -d
      - name: Checking docker instance 
        run: docker ps
      - name : Testing postgres packages
        run: |
            sudo apt-get update && sudo apt-get install -y gnupg dirmngr
            sudo wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
            sudo apt-get update &&  sudo apt-get install postgresql postgresql-contrib postgresql-client gdal-bin postgis postgresql-14-postgis-3-scripts
            sudo apt list --installed | grep postgresql
            sudo ls -ltr /usr/share/postgresql/13
            sudo cat /usr/share/postgresql/13/extension/postgis.control
        
      - name: psycopg2 prerequisites
        run: sudo apt-get install binutils libproj-dev gdal-bin
      - name: Install dependecies
        run: python -m pip install --upgrade pip
      - name: Install pipenv
        run: pip install pipenv 
      - name: creating pipenv environmebt
        run: pipenv install --skip-lock 
      - name: install black
        run:  pipenv run pip install black
      - name: Run black --check .
        run: pipenv run black --check .
      - name: install isort
        run:  pipenv run pip install isort
      - name: run isort
        run:  pipenv run isort --check .
#       - name: running migration
#         run: pipenv run python manage.py migrate
#       - name: print github
#         run: echo ${GITHUB_REF##*/}
#       - name: running test
#         run: pipenv run python manage.py test
      

          

#   package-job: # package job for building and publishing docker images
#     runs-on: ubuntu-latest
#     needs: [health-check-job] # will be fired if and only if health-check-job is passed.
#     if: github.ref == 'refs/heads/master' # will be fired if the trigger event is a push event.
#     steps:
#       - name: Check Out Repo 
#         uses: actions/checkout@v2
#       - name: Read secrets from AWS Secrets Manager into environment variables
#         uses: abhilash1in/aws-secrets-manager-action@v1.0.1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}
#           secrets: |
#             MY_SECRET_1
#             icarus/dev/database*
#           parse-json: true

#       - name: Check if env variable is set after fetching secrets
#         run: if [ -z ${MY_SECRET_1+x} ]; then echo "MY_SECRET_1 is unset"; else echo "MY_SECRET_1 is set to '$MY_SECRET_1'"; fi
#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#       - name: Set up Docker Buildx
#         id: buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Build and push
#         id: docker_build
#         uses: docker/build-push-action@v2
#         with:
#           context: ./
#           file: ./Dockerfile
#           push: true
#           tags: icarus-api-0.2

#       - name: Image digest
#         run: echo ${{ steps.docker_build.outputs.digest }}
  
#   deploy-job: # deploy job is for deploying our code to google cloud cluster.
#     runs-on: ubuntu-latest
#     needs: [package-job] # will require package-job to be successful for triggering
#     if: ${{ github.event_name == 'push' }} # will be fire if the trigger event is a push event.
#     steps:
#       - name: Checkout code # checking out code.
#         uses: actions/checkout@v2
#       - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master # settings up gcloud cli in our job machine.
#         with:
#           version: '270.0.0'
#           service_account_email: ${{ secrets.GKE_EMAIL }} # email address of our service account that will be created with storage and kubernetes permissions
#           service_account_key: ${{ secrets.GKE_PASSWORD }} # service account file.
#       - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
#         id: repo
#         run: echo "::set-output name=repo_name::gcr.io/${{secrets.GKE_PROJECT}}/github-django-actions/app:sha-$(git rev-parse --short HEAD)" # we are setting the image location as output to be used in later step
#       - name: Check Repo Location
#         run: echo ${{ steps.repo.outputs.repo_name }} # checking our repo location
#       - name: Install Helm # helm installation in our runner for deploying.
#         run: |
#           curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
#           chmod 700 get_helm.sh
#           ./get_helm.sh
#       - name: Connect to kubernetes cluster
#         run: |
#           gcloud container clusters get-credentials ${{secrets.GKE_CLUSTER}} --zone ${{secrets.GKE_ZONE}} --project ${{secrets.GKE_PROJECT}}
#       - name: Helm Deploy # deploying our helm chart to our cluster
#         run: >
#           helm upgrade
#           --install
#           --set image=${{ steps.repo.outputs.repo_name }}
#           --set user=${{ secrets.DB_USER }}
#           --set password=${{ secrets.DB_PASSWORD }}
#           --set host=${{ secrets.DB_HOST }}
#           --set port=${{ secrets.DB_PORT }}
#           --set name=${{ secrets.DB_NAME }}
#           --wait
#           --atomic
#           app
#           ./k8s
#       - name: Check pods # checking pod list to see if they are running.
#         run: kubectl get pods
